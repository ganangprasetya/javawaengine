/* * To change this template, choose Tools | Templates * and open the template in the editor. */package com.chin.wa;import com.jolbox.bonecp.BoneCP;import com.jolbox.bonecp.BoneCPConfig;import java.sql.Connection;import java.sql.PreparedStatement;import java.sql.ResultSet;import java.sql.SQLException;import java.util.Date;import java.util.Iterator;import java.util.concurrent.ConcurrentHashMap;import org.apache.log4j.Logger;/** * * @author Chin */public class ConnectionManager {    private static ConnectionManager instance;    private Logger logger = Logger.getLogger(ConnectionManager.class);    private ConcurrentHashMap _pool = new ConcurrentHashMap();    private int dbType = 1;    private ConnectionManager() {        try {            connectToDB();        } catch (Exception ex) {            logger.error("Error in ConnectionManager.ConnectionManager method:", ex);        }    }    /**    *  destructor    */    @Override    protected void finalize() throws Throwable {        try {            shutdown();            _pool.clear();        } catch (Throwable ex) {            logger.error("ConnectionManager finalize failed to disconnect from mysql:", ex);        } finally {            super.finalize();        }    }    /**    *  connectToDB - Connect to the MySql DB!    */    private void connectToDB() throws Exception {//        BoneCP connectionPool = null;        Connection conn = null;        PreparedStatement ps = null;        ResultSet rs = null;//        try {            Configuration config = Configuration.getInstance();            try {                java.lang.Class.forName(config.getDriverName()).newInstance();            } catch (Exception ex) {                logger.error("Error when attempting to obtain DB Driver: "                        + config.getDriverName() + " on "                        + new Date().toString(), ex);                throw ex;            }            logger.info("Trying to connect to database " + config.getURI() + "...");            try {                // setup the connection pool                BoneCPConfig dbConfig = new BoneCPConfig();                dbConfig.setJdbcUrl(config.getURI());                dbConfig.setUsername(config.getUser());                dbConfig.setPassword(config.getPassword());                dbConfig.setMinConnectionsPerPartition(config.getPoolMinSize());                dbConfig.setMaxConnectionsPerPartition(config.getPoolMaxSize());                dbConfig.setPartitionCount(1);                BoneCP connectionPool = new BoneCP(dbConfig); // setup the connection pool                if (config.getDriverName().toLowerCase().contains("mysql")) {                    dbType = 1;                } else if (config.getDriverName().toLowerCase().contains("sqlserver")) {                    dbType = 2;                }                if (isValidConnection(connectionPool.getConnection(), dbType)) {                    logger.info("Connection attempt to database succeeded.");                    this._pool.putIfAbsent("core", connectionPool);                } else {                    logger.info("Connection attempt to database failed.");                }            } catch(Exception ex) {                logger.error("Error when attempting to connect to database " + config.getURI(), ex);                throw ex;            }//            conn = ((BoneCP) _pool.get("core")).getConnection(); // fetch a connection//            String strSQL;//            if (dbType==1) {//                strSQL = "SELECT id, dbtype, host, port, dbname, user, password, minconn, maxconn FROM connection WHERE status=1 ORDER BY id";//            } else {//                strSQL = "SELECT id, dbtype, host, port, dbname, [user], password, minconn, maxconn FROM connection WHERE status=1 ORDER BY id";//            }//            ps = conn.prepareStatement(strSQL);//            rs = ps.executeQuery();//            while (rs.next()) {//                String connName = "c" + rs.getString("id");//                String dbDriverName = "";//                if (rs.getInt("dbtype")==1) {//                    dbDriverName = "com.mysql.jdbc.Driver";//                } else if (rs.getInt("dbtype")==2) {//                    dbDriverName = "com.microsoft.sqlserver.jdbc.SQLServerDriver";//                }//                //                try {//                    java.lang.Class.forName(dbDriverName).newInstance();//                } catch (Exception ex) {//                    logger.error("Error when attempting to obtain DB Driver: "//                            + dbDriverName + " on " + new Date().toString(), ex);//                    throw ex;//                }//                //                String host = rs.getString("host");//                int port = rs.getInt("port");//                String dbName = rs.getString("dbname");//                String dbUser = rs.getString("user");//                String dbPassword = rs.getString("password");//                //jdbc:mysql://localhost/csr?useUnicode=true&characterEncoding=UTF-8&autoReconnect=true//                String dbURI = "";//                if (rs.getInt("dbtype")==1) {//                    if (rs.getInt("port")==0) {//                        dbURI = "jdbc:mysql://".concat(host).concat("/").concat(dbName).concat("?autoReconnect=true&characterEncoding=UTF-8");//                    } else {//                        dbURI = "jdbc:mysql://".concat(host).concat(":").concat(Integer.toString(port)).concat("/")//                                .concat(dbName).concat("?autoReconnect=true&characterEncoding=UTF-8");//                    }//                } else if (rs.getInt("dbtype")==2) {//                    if (rs.getInt("port")==0) {//                        dbURI = "jdbc:sqlserver://".concat(host).concat(";SelectMethod=cursor;DatabaseName=").concat(dbName);//                    } else {//                        dbURI = "jdbc:sqlserver://".concat(host).concat(":").concat(Integer.toString(port))//                                .concat(";SelectMethod=cursor;DatabaseName=").concat(dbName);//                    }//                }//                //                int dbPoolMinSize = rs.getInt("minconn");//                int dbPoolMaxSize = rs.getInt("maxconn");////                logger.info("Trying to connect to database " + dbURI + "...");//                try {//                    // setup the connection pool//                    BoneCPConfig dbConfig = new BoneCPConfig();//                    dbConfig.setJdbcUrl(dbURI);//                    dbConfig.setUsername(dbUser);//                    dbConfig.setPassword(dbPassword);//                    dbConfig.setMinConnectionsPerPartition(dbPoolMinSize);//                    dbConfig.setMaxConnectionsPerPartition(dbPoolMaxSize);//                    dbConfig.setPartitionCount(1);//                    BoneCP connPool = new BoneCP(dbConfig); // setup the connection pool//                    //                    if (isValidConnection(connPool.getConnection(), rs.getInt("dbtype"))) {//                        logger.info("Connection attempt to database succeeded.");//                        this._pool.putIfAbsent(connName, connPool);//                    } else {//                        logger.info("Connection attempt to database failed.");//                    }//                } catch(Exception ex) {//                    logger.error("Error when attempting to connect to database " + dbURI, ex);//                    throw ex;//                }//            }//            //        } catch (SQLException ex) {//            logger.error("SQL Exception in ConnectionManager.connectToDB method:", ex);//            throw ex;//        } finally {//            try {//                rs.close();//                ps.close();//                conn.close();//            } catch (SQLException ex) {}//        }    }    public static ConnectionManager getInstance() {        if (instance==null) {            synchronized(ConnectionManager.class) {                if (instance==null) {                    instance = new ConnectionManager();                }            }        }        return instance;    }    public void shutdown() {        Iterator iterator = this._pool.entrySet().iterator();        while (iterator. hasNext()){            ((BoneCP) iterator.next()).shutdown();        }    }        public Connection getConnection(String dbName) throws SQLException {//        logger.debug("getConnection => ".concat(dbName));        return ((BoneCP) _pool.get(dbName)).getConnection();    }        public int getDatabaseType() {        return this.dbType;    }        public void printDriverStats() throws Exception {        Iterator iterator = this._pool.entrySet().iterator();        while (iterator. hasNext()){            BoneCP connectionPool = (BoneCP) iterator.next();            logger.info("NumActive: " + connectionPool.getTotalLeased());            logger.info("NumIdle: " + connectionPool.getTotalFree());        }    }    /**    *  getNumLockedProcesses - gets the    *  number of currently locked processes on the MySQL db    *    *  @return Number of locked processes    */    public int getNumLockedProcesses(String dbName) {        int num_locked_connections = 0;        Connection conn = null;        PreparedStatement ps = null;        ResultSet rs = null;        try {            conn = ((BoneCP) _pool.get(dbName)).getConnection();            ps = conn.prepareStatement("SHOW PROCESSLIST");            rs = ps.executeQuery();            while(rs.next()) {                if (rs.getString("State")!=null && rs.getString("State").equals("Locked")) {                    num_locked_connections++;                }            }        } catch (Exception ex) {            logger.error("SQL Exception in module ConnectionManager.getNumLockedProcesses: ", ex);        } finally {            try {                rs.close();                ps.close();                conn.close();            } catch (SQLException ex) {}        }        return num_locked_connections;    }    private boolean isValidConnection(Connection conn, int dbType) {        boolean result = false;        ResultSet rs = null;        PreparedStatement ps = null;        String strSQL = "";        try {            if (dbType==1) {                strSQL = "SELECT NOW()";            } else if (dbType==2) {                strSQL = "SELECT GETDATE() AS ServerDate";            }            ps = conn.prepareStatement(strSQL);            rs = ps.executeQuery();            if (rs.next()) {                result = true;            }        } catch (SQLException ex) {            logger.error("SQL Exception in module ConnectionManager.isValidConnection: ", ex);        } finally {            try {                rs.close();                ps.close();                conn.close();            } catch (SQLException ex) {}        }        return result;    }}